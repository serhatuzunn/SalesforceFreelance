@isTest
public class RC_CreateOpportunityControllerTest {
    @isTest
    public static void unitTest(){
        
		test.startTest();
        RC_CreateOpportunityController.ResultWrapper excel = new RC_CreateOpportunityController.ResultWrapper();
        excel.State = true;
        excel.ErrorMsg = '';
        RC_CreateOpportunityController.excelModelWrapper excelRow = new RC_CreateOpportunityController.excelModelWrapper();
        excelRow.firmaadi = 'TEST 1';
        excelRow.firmamail = 'FirmaTEST@mail.com';
        excelRow.firmaparabirimi = 'TRY';
        excelRow.firmatelefon = '02121236667';
        excelRow.firmavergikimliknumarasi = '2939500571';
        excelRow.kisiad = 'TESTKişi1 Ad';
        excelRow.kisiunvan = 'TESTKişi1 İkinci Ad';
        excelRow.kisimail = 'TESTKisi1@mail.com';
        excelRow.kisisoyad = 'TESTKişi1 Soyad';
        excelRow.kisitelefon = '0212 123 45 99';
        excelRow.ulke = 'Türkiye';
        excel.excelData = new List<RC_CreateOpportunityController.excelModelWrapper>();
    	excel.excelData.Add(excelRow);
        List<string> selectedPills = new List<string>();     
        selectedPills.add('a038E00000E0DHfQAN');   
        //DEV selectedPills.add('a038E00000Dx5uVQAR');
        List<string> accounts = new List<string>();
        
        
        RC_Value_Set__c sector = new RC_Value_Set__c();
        sector.Name = 'Test Sector';
        sector.RC_Type__c = 'Sector';
        insert sector;
        
        RC_Value_Set__c subSector = new RC_Value_Set__c();
        subSector.Name = 'Test subSector';
        subSector.RC_Type__c = 'Sub Sector';
        subSector.RC_Sector__c = sector.id;
        insert subSector;
        
        RC_Value_Set__c productGroup = new RC_Value_Set__c();
        productGroup.Name = 'Test PRoduct Group';
        productGroup.RC_Sub_Sector__c = subSector.id;
        productGroup.RC_Type__c = 'Product Group';
        insert productGroup;
            
        

        RC_Fair__c mainFair = [SELECT Id, Name FROM RC_Fair__c WHERE RC_Related_Fair__c = '' Limit 1];
        RC_Fair__c subFair = [SELECT Id, Name FROM RC_Fair__c WHERE RC_Related_Fair__c =: mainFair.id Limit 1];
        Account acc = [SELECT id FROM Account Limit 1];
        accounts.add(acc.id);
        RC_Value_set__c mainSector = [SELECT Id, Name FROM RC_Value_Set__c WHERE RC_Type__c = 'Sector' ORDER BY Name ASC limit 1];
        
        RC_Related_Sector__c related = new RC_Related_Sector__c();
        related.RC_Account__c = acc.id;
        related.RC_Fair__c =mainFair.id;
        related.RC_Product_Group__c = productGroup.id;
        related.RC_Sector__c = mainSector.id;
        related.RC_Sub_Sector__c = subSector.id;
        related.RC_Type__c = 'Interested';
        insert related;
        
        
        RC_CreateOpportunityController.getInit();
        RC_CreateOpportunityController.FirmaVergiKontrol('9559133935');
        RC_CreateOpportunityController.getSubFairList(mainFair.id);
        RC_CreateOpportunityController.getChildFairs();
        RC_CreateOpportunityController.getSectorPickList();
        RC_CreateOpportunityController.getSubSectorList(mainSector.id);
        RC_CreateOpportunityController.getProductGroupList(subSector.id);
        RC_CreateOpportunityController.listByFairParticipation(mainFair.id, '',0);
        RC_CreateOpportunityController.getExcelData('');
        List<RC_CreateOpportunityController.tableWrapper> dataList = RC_CreateOpportunityController.saveExcel(excel);
        RC_CreateOpportunityController.listByFairSector(selectedPills, 'Interested',0);      
        RC_CreateOpportunityController.listByFair(mainFair.id,'Interested',0);

        RC_CreateOpportunityController.createOpportunity(dataList, subFair.id, 'TEST','A');                   
                                                    	test.stopTest();
    }
     @testSetup public static void SetupMethod()
     {
         RC_TestClassUtils.createTestDatas();       
     }
                                                    
                                                    
}